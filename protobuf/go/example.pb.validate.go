// Code generated by protoc-gen-validate. DO NOT EDIT!
// source: example.proto

package example

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
)

// define the regex for a UUID once up-front
var _example_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Reference imports to suppress errors if they are not otherwise used.

// Validate checks the field values on Token with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (x *Token) Validate() error {
	if x == nil {
		return nil
	}

	// no validation rules for Token

	return nil
}

// TokenValidationError is the validation error returned by Token.Validate if
// the designated constraints aren't met.
type TokenValidationError struct {
	field  string
	custom string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenValidationError) ErrorName() string { return "TokenValidationError" }

// Error satisfies the builtin error interface
func (e TokenValidationError) Error() string {
	if e.custom != "" {
		return e.custom
	}

	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}
	key := ""
	if e.key {
		key = "key for "
	}
	return fmt.Sprintf(
		"invalid %sToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenValidationError{}
var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenValidationError{}

// Validate checks the field values on UpStream with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (x *UpStream) Validate() error {
	if x == nil {
		return nil
	}

	if l := len(x.GetMessage()); l < 1 || l > 31 {
		return UpStreamValidationError{
			field:  "Message",
			reason: "value length must be between 1 and 31 bytes, inclusive",
		}
	}

	return nil
}

// UpStreamValidationError is the validation error returned by
// UpStream.Validate if the designated constraints aren't met.
type UpStreamValidationError struct {
	field  string
	custom string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpStreamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpStreamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpStreamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpStreamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpStreamValidationError) ErrorName() string { return "UpStreamValidationError" }

// Error satisfies the builtin error interface
func (e UpStreamValidationError) Error() string {
	if e.custom != "" {
		return e.custom
	}

	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}
	key := ""
	if e.key {
		key = "key for "
	}
	return fmt.Sprintf(
		"invalid %sUpStream.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpStreamValidationError{}
var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpStreamValidationError{}

// Validate checks the field values on DownStream with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (x *DownStream) Validate() error {
	if x == nil {
		return nil
	}

	// no validation rules for Message

	return nil
}

// DownStreamValidationError is the validation error returned by
// DownStream.Validate if the designated constraints aren't met.
type DownStreamValidationError struct {
	field  string
	custom string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownStreamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownStreamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownStreamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownStreamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownStreamValidationError) ErrorName() string { return "DownStreamValidationError" }

// Error satisfies the builtin error interface
func (e DownStreamValidationError) Error() string {
	if e.custom != "" {
		return e.custom
	}

	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}
	key := ""
	if e.key {
		key = "key for "
	}
	return fmt.Sprintf(
		"invalid %sDownStream.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownStreamValidationError{}
var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownStreamValidationError{}
